akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
akka.persistence.journal.leveldb.dir = "target/rtjvm/journal"
akka.persistence.journal.leveldb.native = false

akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
akka.persistence.snapshot-store.local.dir = "target/rtjvm/snapshots"

localStores {
    akka.persistence {
        journal {
            plugin = "akka.persistence.journal.leveldb"
            leveldb.dir = "target/localStores/journal"
            leveldb.native = false
            leveldb.compaction-intervals {
                simple-persistent-actor = 1000
                "*" = 5000
            }
        }

        snapshot-store {
            plugin = "akka.persistence.snapshot-store.local"
            local.dir = "target/localStores/snapshots"
        }
    }
}

postgresDemo {
    akka.persistence {
        journal {
            plugin = "jdbc-journal"
        }

        snapshot-store {
            plugin = "jdbc-snapshot-store"
        }
    }

    akka-persistence-jdbc {
        shared-databases {
            slick {
                profile = "slick.jdbc.PostgresProfile$"
                db {
                    numThreads = 10
                    driver = "org.postgresql.Driver"
                    url = "jdbc:postgresql://localhost:5432/rtjvm"
                    user = "docker"
                    password = "docker"
                }
            }
        }
    }

    jdbc-journal {
        use-shared-db = "slick"
    }

    jdbc-snapshot-store {
        use-shared-db = "slick"
    }
}

cassandraDemo {
    akka.persistence.journal.plugin = "cassandra-journal"
    akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"
}

customSerializerDemo {
    akka.persistence.journal.plugin = "cassandra-journal"
    akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

    akka.actor {
        serializers {
            java = "akka.serialization.JavaSerializer"
            rtjvm = "part3storesandserialization.UserRegistrationSerializer"
        }

        serialization-bindings {
            "part3storesandserialization.UserRegistered" = rtjvm
        }
    }
}

eventAdapters {
    akka.persistence.journal.plugin = "cassandra-journal"
    akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

    cassandra-journal {
        event-adapters {
            guitar-inventory-enhancer = "part4practices.EventAdapters$GuitarReadEventAdapter"
        }

        event-adapter-bindings {
            "part4practices.EventAdapters$GuitarAdded" = guitar-inventory-enhancer
        }
    }
}

detachingModels {
    akka.persistence.journal.plugin = "cassandra-journal"
    akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

    cassandra-journal {
        event-adapters {
            detach-adapter = "part4practices.ModelAdapter"
        }

        event-adapter-bindings {
            "part4practices.DomainModel$CouponApplied" = detach-adapter
            "part4practices.DataModel$WrittenCouponApplied" = detach-adapter
            "part4practices.DataModel$WrittenCouponAppliedV2" = detach-adapter
        }
    }
}